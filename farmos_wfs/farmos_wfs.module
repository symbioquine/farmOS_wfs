<?php

/**
 * @file
 * Module implementation file.
 */
const FARMOS_WFS_IMPLEMENTATION_VERSION = '1.1.0';

const FARMOS_WFS_DEFAULT_CRS = 'EPSG:4326';

const FARMOS_WFS_QUALIFIED_TYPE_NAMES = [
  'farmos:PointArea',
  'farmos:PolygonArea',
  'farmos:LineStringArea'
];

const FARMOS_WFS_UNQUALIFIED_TYPE_NAMES = [
  'PointArea',
  'PolygonArea',
  'LineStringArea'
];

const FARMOS_WFS_RECOGNIZED_GEOMETRY_TYPES = [
  'Point',
  'Polygon',
  'LineString'
];

const FARMOS_WFS_RECOGNIZED_GEOMETRY_TYPES_LOWERCASE_TO_UPPERCASE = [
  'point' => 'Point',
  'polygon' => 'Polygon',
  'linestring' => 'LineString'
];

const FARMOS_WFS_EMPTY_FILTER_BEHAVIOR_MATCH_ALL = 'match_all';

const FARMOS_WFS_EMPTY_FILTER_BEHAVIOR_MATCH_NONE = 'match_none';

// Here be hacks... beware! Unclear why this is needed
require_once '../vendor/phayes/geophp/geoPHP.inc';

function farmos_wfs_makeDoc($declarator) {
  $xml = new DomDocument('1.0', 'UTF-8');

  $elem = null;
  $elem = function ($name, $attrs, $elemContent = null) use ($xml, &$elem) {
    $e = $xml->createElement($name);

    foreach ($attrs as $attrKey => $attrVal) {
      $e->setAttribute($attrKey, $attrVal);
    }

    if (isset($elemContent)) {
      if (is_callable($elemContent)) {
        $elemContent($e, $elem);
      } elseif ($elemContent instanceof DOMNode) {
        $e->appendChild($elemContent);
      } elseif (is_string($elemContent)) {
        $e->nodeValue = $elemContent;
      }
    }

    return $e;
  };

  $declarator($xml, $elem);

  $xml->formatOutput = TRUE;

  return $xml;
}

function farmos_wfs_makeExceptionReport($declarator) {
  return farmos_wfs_makeDoc(
    function ($doc, $elem) use ($declarator) {
      $doc->appendChild(
        $elem('ExceptionReport',
          array(
            'xmlns' => "http://www.opengis.net/ows/1.1",
            'xmlns:xsi' => "http://www.w3.org/2001/XMLSchema-instance",
            'xsi:schemaLocation' => "http://www.opengis.net/ows/1.1 owsExceptionReport.xsd",
            'version' => FARMOS_WFS_IMPLEMENTATION_VERSION,
            'xml:lang' => "en"
          ), $declarator));
    });
}

// Based on https://www.php.net/manual/en/domdocument.loadxml.php#69295
function farmos_wfs_handleXmlLoadingErrors($errno, $errstr, $errfile, $errline) {
  if ($errno == E_WARNING && (substr_count($errstr, "DOMDocument::loadXML()") > 0)) {
    throw new DOMException($errstr);
  }

  return false;
}

// Based on https://www.php.net/manual/en/domdocument.loadxml.php#69295
function farmos_wfs_loadXml($xml_string) {
  set_error_handler('farmos_wfs_handleXmlLoadingErrors');
  $dom = new DOMDocument();
  $dom->loadXml($xml_string);
  restore_error_handler();
  return $dom;
}

function farmos_wfs_get_xnode_children_with_tag($node, $tag) {
  if (! $node) {
    return [];
  }
  return farmos_wfs_filter_xnodes_by_local_name(iterator_to_array($node->childNodes), $tag);
}

function farmos_wfs_filter_xnodes_by_local_name($nodes, $predicate) {
  return array_values(
    array_filter($nodes,
      function ($n) use ($predicate) {
        return is_callable($predicate) ? $predicate($n->localName) : $n->localName == $predicate;
      }));
}
