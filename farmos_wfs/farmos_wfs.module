<?php

/**
 * @file
 * Module implementation file.
 */
const FARMOS_WFS_IMPLEMENTATION_VERSION = '1.1.0';

const FARMOS_WFS_DEFAULT_CRS = 'EPSG:4326';

const FARMOS_WFS_QUALIFIED_TYPE_NAMES = [
  'farmos:PointArea',
  'farmos:PolygonArea',
  'farmos:LineStringArea'
];

const FARMOS_WFS_UNQUALIFIED_TYPE_NAMES = [
  'PointArea',
  'PolygonArea',
  'LineStringArea'
];

function farmos_wfs_makeDoc($declarator) {
  $xml = new DomDocument('1.0', 'UTF-8');

  $elem = null;
  $elem = function ($name, $attrs, $elemContent = null) use ($xml, &$elem) {
    $e = $xml->createElement($name);

    foreach ($attrs as $attrKey => $attrVal) {
      $e->setAttribute($attrKey, $attrVal);
    }

    if (isset($elemContent)) {
      if (is_callable($elemContent)) {
        $elemContent($e, $elem);
      } elseif ($elemContent instanceof DOMNode) {
        $e->appendChild($elemContent);
      } elseif (is_string($elemContent)) {
        $e->nodeValue = $elemContent;
      }
    }

    return $e;
  };

  $declarator($xml, $elem);

  $xml->formatOutput = TRUE;

  return $xml;
}

function farmos_wfs_makeExceptionReport($declarator) {
  return farmos_wfs_makeDoc(function ($doc, $elem) use ($declarator) {
    $doc->appendChild($elem('ExceptionReport', array(
      'xmlns' => "http://www.opengis.net/ows/1.1",
      'xmlns:xsi' => "http://www.w3.org/2001/XMLSchema-instance",
      'xsi:schemaLocation' => "http://www.opengis.net/ows/1.1 owsExceptionReport.xsd",
      'version' => FARMOS_WFS_IMPLEMENTATION_VERSION,
      'xml:lang' => "en"
    ), $declarator));
  });
}

// Based on https://www.php.net/manual/en/domdocument.loadxml.php#69295
function farmos_wfs_handleXmlLoadingErrors($errno, $errstr, $errfile, $errline) {
  if ($errno == E_WARNING && (substr_count($errstr, "DOMDocument::loadXML()") > 0)) {
    throw new DOMException($errstr);
  }

  return false;
}

// Based on https://www.php.net/manual/en/domdocument.loadxml.php#69295
function farmos_wfs_loadXml($xml_string) {
  set_error_handler('farmos_wfs_handleXmlLoadingErrors');
  $dom = new DOMDocument();
  $dom->loadXml($xml_string);
  restore_error_handler();
  return $dom;
}

define("FARMOS_WFS_EMPTY_FILTER_BEHAVIOR_MATCH_ALL", 'match_all');
define("FARMOS_WFS_EMPTY_FILTER_BEHAVIOR_MATCH_NONE", 'match_none');

/*
 * Retrieves an array of taxonomy ids for the areas which have a particular geometry type and (optionally) match a OGC Filter or fall within a given bounding box.
 */
function farmos_wfs_ogc_filter_one_point_one_to_area_ids($geo_types, $filter_elem, $bbox = null, $empty_filter_behavior = FARMOS_WFS_EMPTY_FILTER_BEHAVIOR_MATCH_NONE) {
  $filter_ids = [];
  if ($filter_elem) {
    $nontext_filter_children = array_values(array_filter(iterator_to_array($filter_elem->childNodes), function ($e) {
      return ! ($e instanceof DomText && $e->isWhitespaceInElementContent());
    }));

    $distinct_child_names = array_unique(array_map(function ($e) {
      return $e->localName;
    }, $nontext_filter_children));

    if (empty($distinct_child_names)) {
      throw new Exception("Illegal filter expression. Cannot be empty.");
    }

    if (count($distinct_child_names) > 1) {
      $distinct_child_names_str = print_r($distinct_child_names, TRUE);
      throw new Exception("Illegal filter expression. Heterogeneous children of types: $distinct_child_names_str");
    }

    if ($distinct_child_names[0] == 'FeatureId' || $distinct_child_names[0] == 'GmlObjectId') {

      $children_with_tag = 'farmos_wfs_get_xnode_children_with_tag';

      $filter_raw_ids = array_merge(array_map(function ($e) {
        return $e->getAttribute('fid');
      }, $children_with_tag($filter_elem, 'FeatureId')), array_map(function ($e) {
        return $e->getAttribute('id');
      }, $children_with_tag($filter_elem, 'GmlObjectId')));

      $filter_ids = array_map(function ($raw_id) {
        return preg_replace('/^[^.]+\.(\d+)$/', '$1', $raw_id);
      }, $filter_raw_ids);
    } else {
      throw new Exception("Unsupported filter operation: '{$distinct_child_names[0]}'");
    }
  }

  // Bail if the filter has no criteria - i.e. don't support vacuously matching all features
  // TODO: Also check other filter criteria once those are supported
  if ($empty_filter_behavior == FARMOS_WFS_EMPTY_FILTER_BEHAVIOR_MATCH_NONE && empty($filter_ids) && empty($bbox)) {
    return [];
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')->entityCondition('bundle', 'farm_areas');

  if (! empty($geo_types)) {
    $query->fieldCondition('field_farm_geofield', 'geo_type', $geo_types, 'IN', 0);
  }

  // TODO: Consider handling features and/or bounding boxes which cross the anti-meridian
  if (! empty($bbox)) {
    $query->fieldCondition('field_farm_geofield', 'top', $bbox[0], '>=', 0);
    $query->fieldCondition('field_farm_geofield', 'right', $bbox[1], '>=', 0);
    $query->fieldCondition('field_farm_geofield', 'bottom', $bbox[2], '<=', 0);
    $query->fieldCondition('field_farm_geofield', 'left', $bbox[3], '<=', 0);
  }

  if (! empty($filter_ids)) {
    $query->propertyCondition('tid', $filter_ids, 'IN');
  }

  $result = $query->execute();

  if (isset($result['taxonomy_term'])) {
    return array_keys($result['taxonomy_term']);
  }

  return [];
}

function farmos_wfs_get_xnode_children_with_tag($node, $tag) {
  if (! $node) {
    return [];
  }
  return farmos_wfs_filter_xnodes_by_local_name(iterator_to_array($node->childNodes), $tag);
}

function farmos_wfs_filter_xnodes_by_local_name($nodes, $localName) {
  return array_values(array_filter($nodes, function ($n) use ($localName) {
    return $n->localName == $localName;
  }));
}
